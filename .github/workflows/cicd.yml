name: Build and Check

on:
  push:
    branches: ["main", "cicd", "release"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"

jobs:
  base:
    name: Build, check and test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        toolchain:
          - 1.60.0 # MSRV
          - stable
          - nightly
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt
      - name: Prepare
        if: matrix.toolchain != 'stable'
        run: |
          rustup toolchain install stable --no-self-update --component clippy
      - uses: Swatinem/rust-cache@v2.2.0
        with:
          key: "${{ matrix.os }}_${{ matrix.toolchain }}"
      - name: Info if unix
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          uname -a
          pwd
          rustup --version
          rustup show
          rustup component list | grep installed
      - name: Info if windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          rustup show
          rustup component list | grep installed
      - name: Build
        run: cargo build
      - name: Format
        run: cargo fmt --check
      - name: Lint
        run: cargo +stable clippy -- -D warnings
      - name: Test
        run: cargo test

  docs:
    needs: [base]
    name: Docs/ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2.2.0
      - name: Run doc tests
        run: cargo test --doc
      - name: Check Documentation
        run: cargo doc --no-deps --document-private-items

  coverage:
    needs: [base]
    name: Coverage/ubuntu-latest
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:develop-nightly
      options: --security-opt seccomp=unconfined
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2.2.0
      - name: Generate code coverage
        run: |
          cargo tarpaulin --timeout 120 --out Xml
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v2
        with:
          token: ${{secrets.CODECOV_TOKEN}} # not required for public repos
          fail_ci_if_error: true
