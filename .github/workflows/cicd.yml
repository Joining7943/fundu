name: Build and Check

on:
  push:
    branches: ["main", "cicd", "release"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"

jobs:
  base:
    name: Build, check and test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        toolchain:
          - 1.60.0 # MSRV
          - stable
          - nightly
        include:
          - toolchain: 1.60.0
            components: rustfmt
          - toolchain: nightly
            components: rustfmt
          - toolchain: stable
            components: rustfmt, clippy
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: ${{ matrix.components }}
      - name: Prepare
        if: matrix.toolchain != 'stable'
        run: |
          rustup toolchain install stable --no-self-update --component clippy
      - uses: Swatinem/rust-cache@v2.2.0
        with:
          key: "${{ matrix.os }}_${{ matrix.toolchain }}"
      - name: Info if unix
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          uname -a
          pwd
          rustup --version
          rustup show
          rustup component list | grep installed
      - name: Info if windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          rustup show
          rustup component list | grep installed
      - name: Build
        run: cargo build
      - name: Format
        run: cargo fmt --check
      - name: Lint
        run: cargo +stable clippy --all-targets -- -D warnings
      - name: Test
        run: cargo test

  docs:
    needs: [base]
    name: Docs/ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2.2.0
      - name: Run doc tests
        run: cargo test --doc
      - name: Check Documentation
        run: cargo doc --no-deps --document-private-items

  coverage:
    needs: [base]
    name: Coverage/ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v2.2.0
      - name: Prepare
        run: sudo apt-get -y update && sudo apt-get -y install llvm
      - name: Info
        run: |
          uname -a
          printenv | grep -i -e cargo -e rust -e llvm
          cargo -V
          rustup -V
          rustup show
          rustup component list | grep installed
      - name: Create coverage profile
        shell: bash
        run: |
          cat <<EOF > ~/.cargo/config
          [profile.coverage]
          inherits = "dev"
          lto = false
          debug = true
          opt-level = 0
          EOF
      - name: Install grcov
        run: |
          cargo install rustfilt
          cargo install grcov
      - name: Clean
        run: cargo clean
      - name: Build
        run: cargo build --profile coverage
      - name: Test
        run: cargo test --tests --profile coverage
      - name: Generate code coverage
        shell: bash
        run: |
          ~/.cargo/bin/grcov . \
            --llvm-path /usr/bin \
            --binary-path target/coverage \
            --ignore-not-existing \
            --output-type files \
            --excl-start "cov:\s*excl-start" \
            --excl-stop "cov:\s*excl-stop" \
            --excl-line '^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\(|.*//\s*cov:\s*excl-line)' \
            --ignore "examples/*" \
            --ignore build.rs \
            --ignore "vendor/*" \
            --ignore "/*" \
            --ignore "[a-zA-Z]:/*" \
            --source-dir . | sort -u

          ~/.cargo/bin/grcov . \
            --branch \
            --llvm-path /usr/bin \
            --binary-path target/coverage \
            --ignore-not-existing \
            --output-type lcov \
            --source-dir . \
            --excl-start "cov:\s*excl-start" \
            --excl-stop "cov:\s*excl-stop" \
            --excl-line '^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\(|.*//\s*cov:\s*excl-line)' \
            --ignore "examples/*" \
            --ignore build.rs \
            --ignore "vendor/*" \
            --ignore "/*" \
            --ignore "[a-zA-Z]:/*" \
            --output-path lcov.info && test -e lcov.info
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          token: ${{secrets.CODECOV_TOKEN}} # not required for public repos
          fail_ci_if_error: true
    env:
      RUSTFLAGS: "-C instrument-coverage"
      LLVM_PROFILE_FILE: "fundu_coverage-%p-%m.profraw"
      RUST_BACKTRACE: "0"
