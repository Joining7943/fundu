name: Build and Check

on:
  push:
    branches: ["main", "cicd", "release"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"
  BENCHMARK_REGRESSION_PERCENT_FAIL: 10 # no string
  MSRV: "1.60.0"

jobs:
  deny:
    name: Check dependencies/ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          rust-version: ${{ env.MSRV }}

  base:
    name: Build, check and test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        toolchain:
          - ${{ MSRV }}
          - stable
          - nightly
        include:
          - toolchain: ${{ MSRV }}
            components: rustfmt
          - toolchain: nightly
            components: rustfmt
          - toolchain: stable
            components: rustfmt, clippy
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: ${{ matrix.components }}
      - name: Prepare
        if: matrix.toolchain != 'stable'
        run: |
          rustup toolchain install stable --no-self-update --component clippy
      - uses: Swatinem/rust-cache@v2.2.0
        with:
          key: "${{ matrix.os }}_${{ matrix.toolchain }}"
      - name: Info if unix
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          uname -a
          pwd
          rustup --version
          rustup show
          rustup component list | grep installed
      - name: Info if windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          rustup show
          rustup component list | grep installed
      - name: Build
        run: cargo build
      - name: Format
        run: cargo fmt --check
      - name: Lint
        run: cargo +stable clippy --all-targets -- -D warnings
        env:
          CARGO_REGISTRIES_CRATES_IO_PROTOCOL: git # unstable on 1.66 + 1.67
      - name: Test
        run: cargo test

  docs:
    needs: [base]
    name: Docs/ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2.2.0
      - name: Run doc tests
        run: cargo test --doc
      - name: Check Documentation
        run: cargo doc --no-deps --document-private-items

  coverage:
    needs: [base]
    name: Coverage/ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v2.2.0
      - name: Prepare
        run: sudo apt-get -y update && sudo apt-get -y install llvm
      - name: Info
        run: |
          uname -a
          printenv | grep -i -e cargo -e rust -e llvm
          cargo -V
          rustup -V
          rustup show
          rustup component list | grep installed
      - name: Create coverage profile
        shell: bash
        run: |
          cat <<EOF > ~/.cargo/config
          [profile.coverage]
          inherits = "dev"
          lto = false
          debug = true
          opt-level = 0
          EOF
      - name: Install grcov
        run: |
          cargo install rustfilt
          cargo install grcov
      - name: Clean
        run: cargo clean
      - name: Build
        run: cargo build --profile coverage
      - name: Test
        run: cargo test --tests --profile coverage
      - name: Generate code coverage
        shell: bash
        run: |
          ~/.cargo/bin/grcov . \
            --llvm-path /usr/bin \
            --binary-path target/coverage \
            --ignore-not-existing \
            --output-type files \
            --excl-start "cov:\s*excl-start" \
            --excl-stop "cov:\s*excl-stop" \
            --excl-line '^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\(|.*//\s*cov:\s*excl-line)' \
            --ignore "examples/*" \
            --ignore build.rs \
            --ignore "vendor/*" \
            --ignore "/*" \
            --ignore "[a-zA-Z]:/*" \
            --source-dir . | sort -u

          ~/.cargo/bin/grcov . \
            --branch \
            --llvm-path /usr/bin \
            --binary-path target/coverage \
            --ignore-not-existing \
            --output-type lcov \
            --source-dir . \
            --excl-start "cov:\s*excl-start" \
            --excl-stop "cov:\s*excl-stop" \
            --excl-line '^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\(|.*//\s*cov:\s*excl-line)' \
            --ignore "examples/*" \
            --ignore build.rs \
            --ignore "vendor/*" \
            --ignore "/*" \
            --ignore "[a-zA-Z]:/*" \
            --output-path lcov.info && test -e lcov.info
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          token: ${{secrets.CODECOV_TOKEN}} # not required for public repos
          fail_ci_if_error: true
    env:
      RUSTFLAGS: "-C instrument-coverage"
      LLVM_PROFILE_FILE: "fundu_coverage-%p-%m.profraw"
      RUST_BACKTRACE: "0"

  fuzzing:
    needs: [base]
    name: Fuzzy testing/ubuntu-latest
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./fuzz"
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: llvm-tools
      - uses: Swatinem/rust-cache@v2.2.0
        with:
          workspaces: |
            fuzz -> target
          cache-on-failure: true
      - name: Prepare
        run: sudo apt-get -y update && sudo apt-get -y install llvm
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz
      - name: Run fuzzing for 5 minutes
        shell: bash
        run: |
          cargo fuzz run f64_like_input -- \
            -max_total_time=300 \
            -print_final_stats=1 \
            -print_corpus_stats=1 \
            -verbosity=2
    env:
      RUSTFLAGS: "-C instrument-coverage"
      LLVM_PROFILE_FILE: "fundu_fuzzy_coverage-%p-%m.profraw"

  benchmarks:
    needs: [base]
    name: Benchmarks/ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        benchmark:
          - iai_bench_parsing
          - iai_bench_time_unit_parsing
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2.2.0
      - name: Prepare
        run: sudo apt-get -y update && sudo apt-get -y install valgrind
      - name: Download reference benchmarks
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow_conclusion: success
          name: benchmarks-${{ matrix.benchmark }}
          check_artifacts: true
          path: target/iai
          if_no_artifact_found: warn
      - name: Run benchmark ${{ matrix.benchmark }} and check for regression
        id: run
        shell: bash
        run: |
          cargo bench --bench ${{ matrix.benchmark }} | tee bench.out
          sed -En 's/Estimated Cycles:.*\([+]([0-9]*)([.][0-9]*)?%\)/\1/p' bench.out | \
            while read p; do [[ $p -ge $BENCHMARK_REGRESSION_PERCENT_FAIL ]] && exit 1; done
      - uses: actions/upload-artifact@v3
        with:
          name: benchmarks-${{ matrix.benchmark }}
          path: target/iai
